---
import type {
  AttributorData,
  BcpLanguageCode,
  IsoLanguageCode,
  OgTypeTag,
  SocialImageMetadata,
  TwitterCardType,
} from 'types';
import { defaultWebsiteConfig } from 'config';
import '@styles/global.css';

interface Props {
  siteName?: string;
  title?: string;
  titleSuffix?: string;
  description?: string;
  tags?: string[];
  canonicalURL?: string;
  htmlLang?: IsoLanguageCode;
  locale?: BcpLanguageCode;
  alternateLocales?: BcpLanguageCode[];
  author?: AttributorData;
  publisher?: AttributorData;
  pubDatetime?: Date;
  modDatetime?: Date;
  ogType?: OgTypeTag;
  ogImage?: SocialImageMetadata;
  twitterImage?: SocialImageMetadata;
  twitterCardType?: TwitterCardType;
  twitterUsername?: string;
}

const {
  siteName = defaultWebsiteConfig.siteName,
  title = defaultWebsiteConfig.title,
  titleSuffix = defaultWebsiteConfig.titleSuffix,
  description = defaultWebsiteConfig.description,
  tags = defaultWebsiteConfig.tags,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  htmlLang = defaultWebsiteConfig.htmlLang,
  locale = defaultWebsiteConfig.locale,
  alternateLocales = defaultWebsiteConfig.alternateLocales,
  author = defaultWebsiteConfig.author,
  publisher = defaultWebsiteConfig.publisher,
  pubDatetime,
  modDatetime,
  ogType = 'website',
  ogImage = defaultWebsiteConfig.ogImage,
  twitterImage = defaultWebsiteConfig.twitterImage,
  twitterCardType = 'summary_large_image',
  twitterUsername = defaultWebsiteConfig.socialMedia.twitter?.username,
} = Astro.props;

const ogImageUrl = new URL(ogImage.fileName, Astro.url.origin).href;

const twitterImageUrl = twitterImage
  ? new URL(twitterImage.fileName, Astro.url.origin).href
  : undefined;

const structuredData: Record<string, unknown> = {
  '@context': 'https://schema.org',
};
if (ogType === 'article') {
  structuredData['@type'] = 'BlogPosting';
  structuredData.headline = title;
  structuredData.image = ogImageUrl;
  structuredData.datePublished = pubDatetime?.toISOString();
  if (modDatetime) structuredData.dateModified = modDatetime.toISOString();
  structuredData.author = [
    {
      '@type': author.type,
      name: author.displayName,
      url: author.profileUrl,
    },
  ];
  structuredData.publisher = {
    '@type': publisher.type,
    name: publisher.displayName,
    url: publisher.profileUrl,
  };
} else if (ogType === 'website') {
  structuredData['@type'] = 'WebSite';
  structuredData.name = siteName;
  structuredData.url = canonicalURL;
}
---

<!doctype html>
<html lang={htmlLang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General meta tags -->
    <title>{titleSuffix ? `${title} | ${titleSuffix}` : title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author.displayName} />
    <meta name="keywords" content={tags.toString()} />

    <!-- Open Graph -->
    <meta property="og:type" content={ogType} />

    {
      ogType === 'article' && (
        <meta
          property="og:article:published_time"
          content={pubDatetime?.toISOString()}
        />
      )
    }
    {
      ogType === 'article' && (
        <meta
          property="og:article:modified_time"
          content={modDatetime?.toISOString()}
        />
      )
    }
    {
      ogType === 'article' && (
        <meta
          property="og:article:author"
          content={author.profileUrl ? author.profileUrl : author.displayName}
        />
      )
    }
    {
      ogType === 'article' &&
        tags.forEach((tag) => <meta property="og:article:tag" content={tag} />)
    }

    <meta property="og:site_name" content={siteName} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />

    <meta property="og:locale" content={locale} />
    {
      alternateLocales.forEach((altLocale) => (
        <meta property="og:locale:alternate" content={altLocale} />
      ))
    }

    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:image:type" content={ogImage.imageType} />
    <meta property="og:image:width" content={String(ogImage.width)} />
    <meta property="og:image:height" content={String(ogImage.height)} />
    <meta property="og:image:alt" content={ogImage.alt} />

    <!-- Twitter -->
    <meta property="twitter:card" content={twitterCardType} />
    {
      twitterUsername && (
        <meta property="twitter:site" content={twitterUsername} />
      )
    }
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta
      property="twitter:image"
      content={twitterImageUrl ? twitterImageUrl : ogImageUrl}
    />
    <meta
      property="twitter:image:type"
      content={twitterImage ? twitterImage.imageType : ogImage.imageType}
    />
    <meta
      property="twitter:image:width"
      content={String(twitterImage ? twitterImage.width : ogImage.width)}
    />
    <meta
      property="twitter:image:height"
      content={String(twitterImage ? twitterImage.height : ogImage.height)}
    />
    <meta
      property="twitter:image:alt"
      content={twitterImage ? twitterImage.alt : ogImage.alt}
    />

    <!-- Structured data -->
    <script
      type="application/ld+json"
      is:inline
      set:html={JSON.stringify(structuredData)}
    />
  </head>
  <body class="flex min-h-svh flex-col antialiased">
    <slot />
  </body>
</html>
